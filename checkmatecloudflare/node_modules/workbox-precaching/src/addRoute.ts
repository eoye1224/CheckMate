<<<<<<< HEAD

=======
>>>>>>> features/task-display-and-function
/*
  Copyright 2019 Google LLC
  Use of this source code is governed by an MIT-style
  license that can be found in the LICENSE file or at
  https://opensource.org/licenses/MIT.
*/

<<<<<<< HEAD
import {addFetchListener, FetchListenerOptions} from './utils/addFetchListener.js';
import './_version.js';


let listenerAdded = false;

=======
import {registerRoute} from 'workbox-routing/registerRoute.js';

import {getOrCreatePrecacheController} from './utils/getOrCreatePrecacheController.js';
import {PrecacheRoute} from './PrecacheRoute.js';
import {PrecacheRouteOptions} from './_types.js';

import './_version.js';

>>>>>>> features/task-display-and-function
/**
 * Add a `fetch` listener to the service worker that will
 * respond to
 * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}
 * with precached assets.
 *
 * Requests for assets that aren't precached, the `FetchEvent` will not be
 * responded to, allowing the event to fall through to other `fetch` event
 * listeners.
 *
<<<<<<< HEAD
 * @param {Object} [options]
 * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will
 * check cache entries for a URLs ending with '/' to see if there is a hit when
 * appending the `directoryIndex` value.
 * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/]] An
 * array of regex's to remove search params when looking for a cache match.
 * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will
 * check the cache for the URL with a `.html` added to the end of the end.
 * @param {module:workbox-precaching~urlManipulation} [options.urlManipulation]
 * This is a function that should take a URL and return an array of
 * alternative URLs that should be checked for precache matches.
 *
 * @memberof module:workbox-precaching
 */
function addRoute(options?: FetchListenerOptions) {
  if (!listenerAdded) {
    addFetchListener(options);
    listenerAdded = true;
  }
}

export {addRoute}
=======
 * @param {Object} [options] See the {@link workbox-precaching.PrecacheRoute}
 * options.
 *
 * @memberof workbox-precaching
 */
function addRoute(options?: PrecacheRouteOptions): void {
  const precacheController = getOrCreatePrecacheController();

  const precacheRoute = new PrecacheRoute(precacheController, options);
  registerRoute(precacheRoute);
}

export {addRoute};
>>>>>>> features/task-display-and-function

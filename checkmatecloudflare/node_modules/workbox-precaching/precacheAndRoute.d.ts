<<<<<<< HEAD
import { FetchListenerOptions } from './utils/addFetchListener.js';
import { PrecacheEntry } from './_types.js';
import './_version.js';
declare global {
    interface WorkerGlobalScope {
        __WB_MANIFEST: Array<PrecacheEntry | string>;
    }
}
=======
import { PrecacheRouteOptions, PrecacheEntry } from './_types.js';
import './_version.js';
>>>>>>> features/task-display-and-function
/**
 * This method will add entries to the precache list and add a route to
 * respond to fetch events.
 *
 * This is a convenience method that will call
<<<<<<< HEAD
 * [precache()]{@link module:workbox-precaching.precache} and
 * [addRoute()]{@link module:workbox-precaching.addRoute} in a single call.
 *
 * @param {Array<Object|string>} entries Array of entries to precache.
 * @param {Object} [options] See
 * [addRoute() options]{@link module:workbox-precaching.addRoute}.
 *
 * @memberof module:workbox-precaching
 */
declare function precacheAndRoute(entries: Array<PrecacheEntry | string>, options?: FetchListenerOptions): void;
=======
 * {@link workbox-precaching.precache} and
 * {@link workbox-precaching.addRoute} in a single call.
 *
 * @param {Array<Object|string>} entries Array of entries to precache.
 * @param {Object} [options] See the
 * {@link workbox-precaching.PrecacheRoute} options.
 *
 * @memberof workbox-precaching
 */
declare function precacheAndRoute(entries: Array<PrecacheEntry | string>, options?: PrecacheRouteOptions): void;
>>>>>>> features/task-display-and-function
export { precacheAndRoute };

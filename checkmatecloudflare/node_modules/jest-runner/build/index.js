'use strict';

<<<<<<< HEAD
=======
Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = void 0;

>>>>>>> features/task-display-and-function
function _chalk() {
  const data = _interopRequireDefault(require('chalk'));

  _chalk = function () {
    return data;
  };

  return data;
}

function _emittery() {
  const data = _interopRequireDefault(require('emittery'));

  _emittery = function () {
    return data;
  };

  return data;
}

<<<<<<< HEAD
function _exit() {
  const data = _interopRequireDefault(require('exit'));

  _exit = function () {
    return data;
  };

  return data;
}

=======
>>>>>>> features/task-display-and-function
function _throat() {
  const data = _interopRequireDefault(require('throat'));

  _throat = function () {
    return data;
  };

  return data;
}

function _jestUtil() {
  const data = require('jest-util');

  _jestUtil = function () {
    return data;
  };

  return data;
}

function _jestWorker() {
<<<<<<< HEAD
  const data = _interopRequireDefault(require('jest-worker'));
=======
  const data = require('jest-worker');
>>>>>>> features/task-display-and-function

  _jestWorker = function () {
    return data;
  };

  return data;
}

var _runTest = _interopRequireDefault(require('./runTest'));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {default: obj};
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}

const TEST_WORKER_PATH = require.resolve('./testWorker');

class TestRunner {
  constructor(globalConfig, context) {
    _defineProperty(this, '_globalConfig', void 0);

    _defineProperty(this, '_context', void 0);

<<<<<<< HEAD
    _defineProperty(this, 'eventEmitter', new (_emittery().default.Typed)());
=======
    _defineProperty(this, 'eventEmitter', new (_emittery().default)());
>>>>>>> features/task-display-and-function

    _defineProperty(
      this,
      '__PRIVATE_UNSTABLE_API_supportsEventEmitters__',
      true
    );

    _defineProperty(this, 'isSerial', void 0);

<<<<<<< HEAD
    _defineProperty(this, 'on', this.eventEmitter.on.bind(this.eventEmitter));

=======
>>>>>>> features/task-display-and-function
    this._globalConfig = globalConfig;
    this._context = context || {};
  }

  async runTests(tests, watcher, onStart, onResult, onFailure, options) {
    return await (options.serial
      ? this._createInBandTestRun(tests, watcher, onStart, onResult, onFailure)
      : this._createParallelTestRun(
          tests,
          watcher,
          onStart,
          onResult,
          onFailure
        ));
  }

  async _createInBandTestRun(tests, watcher, onStart, onResult, onFailure) {
    process.env.JEST_WORKER_ID = '1';
    const mutex = (0, _throat().default)(1);
    return tests.reduce(
      (promise, test) =>
        mutex(() =>
          promise
            .then(async () => {
              if (watcher.isInterrupted()) {
                throw new CancelRun();
<<<<<<< HEAD
              }

              let sendMessageToJest; // Remove `if(onStart)` in Jest 27
=======
              } // Remove `if(onStart)` in Jest 27
>>>>>>> features/task-display-and-function

              if (onStart) {
                await onStart(test);
                return (0, _runTest.default)(
                  test.path,
                  this._globalConfig,
                  test.context.config,
                  test.context.resolver,
                  this._context,
                  undefined
                );
<<<<<<< HEAD
              } else {
                // `deepCyclicCopy` used here to avoid mem-leak
                sendMessageToJest = (eventName, args) =>
                  this.eventEmitter.emit(
                    eventName,
                    (0, _jestUtil().deepCyclicCopy)(args, {
                      keepPrototype: false
                    })
                  );

                await this.eventEmitter.emit('test-file-start', [test]);
                return (0, _runTest.default)(
                  test.path,
                  this._globalConfig,
                  test.context.config,
                  test.context.resolver,
                  this._context,
                  sendMessageToJest
                );
              }
=======
              } // `deepCyclicCopy` used here to avoid mem-leak

              const sendMessageToJest = (eventName, args) =>
                this.eventEmitter.emit(
                  eventName,
                  (0, _jestUtil().deepCyclicCopy)(args, {
                    keepPrototype: false
                  })
                );

              await this.eventEmitter.emit('test-file-start', [test]);
              return (0, _runTest.default)(
                test.path,
                this._globalConfig,
                test.context.config,
                test.context.resolver,
                this._context,
                sendMessageToJest
              );
>>>>>>> features/task-display-and-function
            })
            .then(result => {
              if (onResult) {
                return onResult(test, result);
<<<<<<< HEAD
              } else {
                return this.eventEmitter.emit('test-file-success', [
                  test,
                  result
                ]);
              }
=======
              }

              return this.eventEmitter.emit('test-file-success', [
                test,
                result
              ]);
>>>>>>> features/task-display-and-function
            })
            .catch(err => {
              if (onFailure) {
                return onFailure(test, err);
<<<<<<< HEAD
              } else {
                return this.eventEmitter.emit('test-file-failure', [test, err]);
              }
=======
              }

              return this.eventEmitter.emit('test-file-failure', [test, err]);
>>>>>>> features/task-display-and-function
            })
        ),
      Promise.resolve()
    );
  }

  async _createParallelTestRun(tests, watcher, onStart, onResult, onFailure) {
    const resolvers = new Map();

    for (const test of tests) {
      if (!resolvers.has(test.context.config.name)) {
        resolvers.set(test.context.config.name, {
          config: test.context.config,
          serializableModuleMap: test.context.moduleMap.toJSON()
        });
      }
    }

<<<<<<< HEAD
    const worker = new (_jestWorker().default)(TEST_WORKER_PATH, {
=======
    const worker = new (_jestWorker().Worker)(TEST_WORKER_PATH, {
>>>>>>> features/task-display-and-function
      exposedMethods: ['worker'],
      forkOptions: {
        stdio: 'pipe'
      },
      maxRetries: 3,
      numWorkers: this._globalConfig.maxWorkers,
      setupArgs: [
        {
          serializableResolvers: Array.from(resolvers.values())
        }
      ]
    });
    if (worker.getStdout()) worker.getStdout().pipe(process.stdout);
    if (worker.getStderr()) worker.getStderr().pipe(process.stderr);
    const mutex = (0, _throat().default)(this._globalConfig.maxWorkers); // Send test suites to workers continuously instead of all at once to track
    // the start time of individual tests.

    const runTestInWorker = test =>
      mutex(async () => {
        if (watcher.isInterrupted()) {
          return Promise.reject();
        } // Remove `if(onStart)` in Jest 27

        if (onStart) {
          await onStart(test);
        } else {
          await this.eventEmitter.emit('test-file-start', [test]);
        }

        const promise = worker.worker({
          config: test.context.config,
          context: {
            ...this._context,
            changedFiles:
              this._context.changedFiles &&
              Array.from(this._context.changedFiles),
            sourcesRelatedToTestsInChangedFiles:
              this._context.sourcesRelatedToTestsInChangedFiles &&
              Array.from(this._context.sourcesRelatedToTestsInChangedFiles)
          },
          globalConfig: this._globalConfig,
          path: test.path
        });

        if (promise.UNSTABLE_onCustomMessage) {
          // TODO: Get appropriate type for `onCustomMessage`
          promise.UNSTABLE_onCustomMessage(([event, payload]) => {
            this.eventEmitter.emit(event, payload);
          });
        }

        return promise;
      });

<<<<<<< HEAD
    const onError = async (err, test) => {
      // Remove `if(onFailure)` in Jest 27
      if (onFailure) {
        await onFailure(test, err);
      } else {
        await this.eventEmitter.emit('test-file-failure', [test, err]);
      }

      if (err.type === 'ProcessTerminatedError') {
        console.error(
          'A worker process has quit unexpectedly! ' +
            'Most likely this is an initialization error.'
        );
        (0, _exit().default)(1);
      }
    };

=======
>>>>>>> features/task-display-and-function
    const onInterrupt = new Promise((_, reject) => {
      watcher.on('change', state => {
        if (state.interrupted) {
          reject(new CancelRun());
        }
      });
    });
    const runAllTests = Promise.all(
      tests.map(test =>
        runTestInWorker(test)
          .then(result => {
            if (onResult) {
              return onResult(test, result);
<<<<<<< HEAD
            } else {
              return this.eventEmitter.emit('test-file-success', [
                test,
                result
              ]);
            }
          })
          .catch(error => onError(error, test))
=======
            }

            return this.eventEmitter.emit('test-file-success', [test, result]);
          })
          .catch(error => {
            if (onFailure) {
              return onFailure(test, error);
            }

            return this.eventEmitter.emit('test-file-failure', [test, error]);
          })
>>>>>>> features/task-display-and-function
      )
    );

    const cleanup = async () => {
      const {forceExited} = await worker.end();

      if (forceExited) {
        console.error(
          _chalk().default.yellow(
            'A worker process has failed to exit gracefully and has been force exited. ' +
              'This is likely caused by tests leaking due to improper teardown. ' +
<<<<<<< HEAD
              'Try running with --detectOpenHandles to find leaks.'
=======
              'Try running with --detectOpenHandles to find leaks. ' +
              'Active timers can also cause this, ensure that .unref() was called on them.'
>>>>>>> features/task-display-and-function
          )
        );
      }
    };

    return Promise.race([runAllTests, onInterrupt]).then(cleanup, cleanup);
  }
<<<<<<< HEAD
}

=======

  on(eventName, listener) {
    return this.eventEmitter.on(eventName, listener);
  }
}

exports.default = TestRunner;

>>>>>>> features/task-display-and-function
class CancelRun extends Error {
  constructor(message) {
    super(message);
    this.name = 'CancelRun';
  }
}
<<<<<<< HEAD

module.exports = TestRunner;
=======
>>>>>>> features/task-display-and-function

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RULE_NAME = void 0;
<<<<<<< HEAD
var experimental_utils_1 = require("@typescript-eslint/experimental-utils");
var utils_1 = require("../utils");
exports.RULE_NAME = 'no-await-sync-query';
var SYNC_QUERIES_REGEXP = /^(get|query)(All)?By(LabelText|PlaceholderText|Text|AltText|Title|DisplayValue|Role|TestId)$/;
exports.default = experimental_utils_1.ESLintUtils.RuleCreator(utils_1.getDocsUrl)({
=======
const create_testing_library_rule_1 = require("../create-testing-library-rule");
const node_utils_1 = require("../node-utils");
exports.RULE_NAME = 'no-await-sync-query';
exports.default = (0, create_testing_library_rule_1.createTestingLibraryRule)({
>>>>>>> features/task-display-and-function
    name: exports.RULE_NAME,
    meta: {
        type: 'problem',
        docs: {
            description: 'Disallow unnecessary `await` for sync queries',
<<<<<<< HEAD
            category: 'Best Practices',
            recommended: 'error',
        },
        messages: {
            noAwaitSyncQuery: '`{{ name }}` does not need `await` operator',
        },
        fixable: null,
        schema: [],
    },
    defaultOptions: [],
    create: function (context) {
        var _a;
        var reportError = function (node) {
            return context.report({
                node: node,
                messageId: 'noAwaitSyncQuery',
                data: {
                    name: node.name,
                },
            });
        };
        return _a = {},
            _a["AwaitExpression > CallExpression > Identifier[name=" + SYNC_QUERIES_REGEXP + "]"] = reportError,
            _a["AwaitExpression > CallExpression > MemberExpression > Identifier[name=" + SYNC_QUERIES_REGEXP + "]"] = reportError,
            _a;
=======
            recommendedConfig: {
                dom: 'error',
                angular: 'error',
                react: 'error',
                vue: 'error',
                marko: 'error',
            },
        },
        messages: {
            noAwaitSyncQuery: '`{{ name }}` query is sync so it does not need to be awaited',
        },
        schema: [],
    },
    defaultOptions: [],
    create(context, _, helpers) {
        return {
            'AwaitExpression > CallExpression'(node) {
                const deepestIdentifierNode = (0, node_utils_1.getDeepestIdentifierNode)(node);
                if (!deepestIdentifierNode) {
                    return;
                }
                if (helpers.isSyncQuery(deepestIdentifierNode)) {
                    context.report({
                        node: deepestIdentifierNode,
                        messageId: 'noAwaitSyncQuery',
                        data: {
                            name: deepestIdentifierNode.name,
                        },
                    });
                }
            },
        };
>>>>>>> features/task-display-and-function
    },
});

"use strict";
<<<<<<< HEAD
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RULE_NAME = void 0;
var experimental_utils_1 = require("@typescript-eslint/experimental-utils");
var utils_1 = require("../utils");
var node_utils_1 = require("../node-utils");
exports.RULE_NAME = 'prefer-screen-queries';
var ALLOWED_RENDER_PROPERTIES_FOR_DESTRUCTURING = [
    'container',
    'baseElement',
];
var ALL_QUERIES_COMBINATIONS_REGEXP = utils_1.ALL_QUERIES_COMBINATIONS.join('|');
function usesContainerOrBaseElement(node) {
    var secondArgument = node.arguments[1];
    return (node_utils_1.isObjectExpression(secondArgument) &&
        secondArgument.properties.some(function (property) {
            return node_utils_1.isProperty(property) &&
                node_utils_1.isIdentifier(property.key) &&
                ALLOWED_RENDER_PROPERTIES_FOR_DESTRUCTURING.includes(property.key.name);
        }));
}
exports.default = experimental_utils_1.ESLintUtils.RuleCreator(utils_1.getDocsUrl)({
=======
Object.defineProperty(exports, "__esModule", { value: true });
exports.RULE_NAME = void 0;
const utils_1 = require("@typescript-eslint/utils");
const create_testing_library_rule_1 = require("../create-testing-library-rule");
const node_utils_1 = require("../node-utils");
exports.RULE_NAME = 'prefer-screen-queries';
const ALLOWED_RENDER_PROPERTIES_FOR_DESTRUCTURING = [
    'container',
    'baseElement',
];
function usesContainerOrBaseElement(node) {
    const secondArgument = node.arguments[1];
    return ((0, node_utils_1.isObjectExpression)(secondArgument) &&
        secondArgument.properties.some((property) => (0, node_utils_1.isProperty)(property) &&
            utils_1.ASTUtils.isIdentifier(property.key) &&
            ALLOWED_RENDER_PROPERTIES_FOR_DESTRUCTURING.includes(property.key.name)));
}
exports.default = (0, create_testing_library_rule_1.createTestingLibraryRule)({
>>>>>>> features/task-display-and-function
    name: exports.RULE_NAME,
    meta: {
        type: 'suggestion',
        docs: {
<<<<<<< HEAD
            description: 'Suggest using screen while using queries',
            category: 'Best Practices',
            recommended: false,
        },
        messages: {
            preferScreenQueries: 'Use screen to query DOM elements, `screen.{{ name }}`',
        },
        fixable: null,
        schema: [],
    },
    defaultOptions: [],
    create: function (context) {
        var _a;
        function reportInvalidUsage(node) {
            context.report({
                node: node,
=======
            description: 'Suggest using `screen` while querying',
            recommendedConfig: {
                dom: 'error',
                angular: 'error',
                react: 'error',
                vue: 'error',
                marko: 'error',
            },
        },
        messages: {
            preferScreenQueries: 'Avoid destructuring queries from `render` result, use `screen.{{ name }}` instead',
        },
        schema: [],
    },
    defaultOptions: [],
    create(context, _, helpers) {
        const renderWrapperNames = [];
        function detectRenderWrapper(node) {
            const innerFunction = (0, node_utils_1.getInnermostReturningFunction)(context, node);
            if (innerFunction) {
                renderWrapperNames.push((0, node_utils_1.getFunctionName)(innerFunction));
            }
        }
        function isReportableRender(node) {
            return (helpers.isRenderUtil(node) || renderWrapperNames.includes(node.name));
        }
        function reportInvalidUsage(node) {
            context.report({
                node,
>>>>>>> features/task-display-and-function
                messageId: 'preferScreenQueries',
                data: {
                    name: node.name,
                },
            });
        }
<<<<<<< HEAD
        var queriesRegex = new RegExp(ALL_QUERIES_COMBINATIONS_REGEXP);
        var queriesDestructuredInWithinDeclaration = [];
        var withinDeclaredVariables = [];
        return _a = {
                VariableDeclarator: function (node) {
                    if (!node_utils_1.isCallExpression(node.init) || !node_utils_1.isIdentifier(node.init.callee)) {
                        return;
                    }
                    var isWithinFunction = node.init.callee.name === 'within';
                    var usesRenderOptions = node.init.callee.name === 'render' &&
                        usesContainerOrBaseElement(node.init);
                    if (!isWithinFunction && !usesRenderOptions) {
                        return;
                    }
                    if (node_utils_1.isObjectPattern(node.id)) {
                        var identifiers = node.id.properties
                            .filter(function (property) {
                            return node_utils_1.isProperty(property) &&
                                node_utils_1.isIdentifier(property.key) &&
                                queriesRegex.test(property.key.name);
                        })
                            .map(function (property) {
                            return property.key.name;
                        });
                        queriesDestructuredInWithinDeclaration.push.apply(queriesDestructuredInWithinDeclaration, identifiers);
                        return;
                    }
                    if (node_utils_1.isIdentifier(node.id)) {
                        withinDeclaredVariables.push(node.id.name);
                    }
                }
            },
            _a["CallExpression > Identifier[name=/^" + ALL_QUERIES_COMBINATIONS_REGEXP + "$/]"] = function (node) {
                if (!queriesDestructuredInWithinDeclaration.some(function (queryName) { return queryName === node.name; })) {
                    reportInvalidUsage(node);
                }
            },
            _a["MemberExpression > Identifier[name=/^" + ALL_QUERIES_COMBINATIONS_REGEXP + "$/]"] = function (node) {
                function isIdentifierAllowed(name) {
                    return __spreadArray(['screen'], withinDeclaredVariables).includes(name);
                }
                if (node_utils_1.isIdentifier(node) &&
                    node_utils_1.isMemberExpression(node.parent) &&
                    node_utils_1.isCallExpression(node.parent.object) &&
                    node_utils_1.isIdentifier(node.parent.object.callee) &&
                    node.parent.object.callee.name !== 'within' &&
                    node.parent.object.callee.name === 'render' &&
                    !usesContainerOrBaseElement(node.parent.object)) {
                    reportInvalidUsage(node);
                    return;
                }
                if (node_utils_1.isMemberExpression(node.parent) &&
                    node_utils_1.isIdentifier(node.parent.object) &&
                    !isIdentifierAllowed(node.parent.object.name)) {
                    reportInvalidUsage(node);
                }
            },
            _a;
=======
        function saveSafeDestructuredQueries(node) {
            if ((0, node_utils_1.isObjectPattern)(node.id)) {
                for (const property of node.id.properties) {
                    if ((0, node_utils_1.isProperty)(property) &&
                        utils_1.ASTUtils.isIdentifier(property.key) &&
                        helpers.isBuiltInQuery(property.key)) {
                        safeDestructuredQueries.push(property.key.name);
                    }
                }
            }
        }
        function isIdentifierAllowed(name) {
            return ['screen', ...withinDeclaredVariables].includes(name);
        }
        const safeDestructuredQueries = [];
        const withinDeclaredVariables = [];
        return {
            VariableDeclarator(node) {
                if (!(0, node_utils_1.isCallExpression)(node.init) ||
                    !utils_1.ASTUtils.isIdentifier(node.init.callee)) {
                    return;
                }
                const isComingFromValidRender = isReportableRender(node.init.callee);
                if (!isComingFromValidRender) {
                    saveSafeDestructuredQueries(node);
                }
                const isWithinFunction = node.init.callee.name === 'within';
                const usesRenderOptions = isComingFromValidRender && usesContainerOrBaseElement(node.init);
                if (!isWithinFunction && !usesRenderOptions) {
                    return;
                }
                if ((0, node_utils_1.isObjectPattern)(node.id)) {
                    saveSafeDestructuredQueries(node);
                }
                else if (utils_1.ASTUtils.isIdentifier(node.id)) {
                    withinDeclaredVariables.push(node.id.name);
                }
            },
            CallExpression(node) {
                const identifierNode = (0, node_utils_1.getDeepestIdentifierNode)(node);
                if (!identifierNode) {
                    return;
                }
                if (helpers.isRenderUtil(identifierNode)) {
                    detectRenderWrapper(identifierNode);
                }
                if (!helpers.isBuiltInQuery(identifierNode)) {
                    return;
                }
                if (!(0, node_utils_1.isMemberExpression)(identifierNode.parent)) {
                    const isSafeDestructuredQuery = safeDestructuredQueries.some((queryName) => queryName === identifierNode.name);
                    if (isSafeDestructuredQuery) {
                        return;
                    }
                    reportInvalidUsage(identifierNode);
                    return;
                }
                const memberExpressionNode = identifierNode.parent;
                if ((0, node_utils_1.isCallExpression)(memberExpressionNode.object) &&
                    utils_1.ASTUtils.isIdentifier(memberExpressionNode.object.callee) &&
                    memberExpressionNode.object.callee.name !== 'within' &&
                    isReportableRender(memberExpressionNode.object.callee) &&
                    !usesContainerOrBaseElement(memberExpressionNode.object)) {
                    reportInvalidUsage(identifierNode);
                    return;
                }
                if (utils_1.ASTUtils.isIdentifier(memberExpressionNode.object) &&
                    !isIdentifierAllowed(memberExpressionNode.object.name)) {
                    reportInvalidUsage(identifierNode);
                }
            },
        };
>>>>>>> features/task-display-and-function
    },
});

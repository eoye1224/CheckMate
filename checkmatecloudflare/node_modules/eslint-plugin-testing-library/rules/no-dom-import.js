"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RULE_NAME = void 0;
<<<<<<< HEAD
var experimental_utils_1 = require("@typescript-eslint/experimental-utils");
var utils_1 = require("../utils");
var node_utils_1 = require("../node-utils");
exports.RULE_NAME = 'no-dom-import';
var DOM_TESTING_LIBRARY_MODULES = [
    'dom-testing-library',
    '@testing-library/dom',
];
exports.default = experimental_utils_1.ESLintUtils.RuleCreator(utils_1.getDocsUrl)({
=======
const create_testing_library_rule_1 = require("../create-testing-library-rule");
const node_utils_1 = require("../node-utils");
exports.RULE_NAME = 'no-dom-import';
const DOM_TESTING_LIBRARY_MODULES = [
    'dom-testing-library',
    '@testing-library/dom',
];
const CORRECT_MODULE_NAME_BY_FRAMEWORK = {
    angular: '@testing-library/angular',
    marko: '@marko/testing-library',
};
const getCorrectModuleName = (moduleName, framework) => {
    var _a;
    return ((_a = CORRECT_MODULE_NAME_BY_FRAMEWORK[framework]) !== null && _a !== void 0 ? _a : moduleName.replace('dom', framework));
};
exports.default = (0, create_testing_library_rule_1.createTestingLibraryRule)({
>>>>>>> features/task-display-and-function
    name: exports.RULE_NAME,
    meta: {
        type: 'problem',
        docs: {
            description: 'Disallow importing from DOM Testing Library',
<<<<<<< HEAD
            category: 'Best Practices',
            recommended: false,
=======
            recommendedConfig: {
                dom: false,
                angular: ['error', 'angular'],
                react: ['error', 'react'],
                vue: ['error', 'vue'],
                marko: ['error', 'marko'],
            },
>>>>>>> features/task-display-and-function
        },
        messages: {
            noDomImport: 'import from DOM Testing Library is restricted, import from corresponding Testing Library framework instead',
            noDomImportFramework: 'import from DOM Testing Library is restricted, import from {{module}} instead',
        },
        fixable: 'code',
<<<<<<< HEAD
        schema: [
            {
                type: 'string',
            },
        ],
    },
    defaultOptions: [''],
    create: function (context, _a) {
        var _b;
        var framework = _a[0];
        function report(node, moduleName) {
            if (framework) {
                var isRequire_1 = node_utils_1.isIdentifier(node) && node.name === 'require';
                var correctModuleName_1 = moduleName.replace('dom', framework);
                context.report({
                    node: node,
                    messageId: 'noDomImportFramework',
                    data: {
                        module: correctModuleName_1,
                    },
                    fix: function (fixer) {
                        if (isRequire_1) {
                            var callExpression = node.parent;
                            var name_1 = callExpression.arguments[0];
                            return fixer.replaceText(name_1, name_1.raw.replace(moduleName, correctModuleName_1));
                        }
                        else {
                            var importDeclaration = node;
                            var name_2 = importDeclaration.source;
                            return fixer.replaceText(name_2, name_2.raw.replace(moduleName, correctModuleName_1));
                        }
                    },
                });
            }
            else {
                context.report({
                    node: node,
                    messageId: 'noDomImport',
                });
            }
        }
        return _b = {
                ImportDeclaration: function (node) {
                    var value = node.source.value;
                    var domModuleName = DOM_TESTING_LIBRARY_MODULES.find(function (module) { return module === value; });
                    if (domModuleName) {
                        report(node, domModuleName);
                    }
                }
            },
            _b["CallExpression > Identifier[name=\"require\"]"] = function (node) {
                var callExpression = node.parent;
                var args = callExpression.arguments;
                var literalNodeDomModuleName = args.find(function (args) {
                    return node_utils_1.isLiteral(args) &&
                        typeof args.value === 'string' &&
                        DOM_TESTING_LIBRARY_MODULES.includes(args.value);
                });
                if (literalNodeDomModuleName) {
                    report(node, literalNodeDomModuleName.value);
                }
            },
            _b;
=======
        schema: [{ type: 'string' }],
    },
    defaultOptions: [''],
    create(context, [framework], helpers) {
        function report(node, moduleName) {
            if (!framework) {
                return context.report({
                    node,
                    messageId: 'noDomImport',
                });
            }
            const correctModuleName = getCorrectModuleName(moduleName, framework);
            context.report({
                data: { module: correctModuleName },
                fix(fixer) {
                    if ((0, node_utils_1.isCallExpression)(node)) {
                        const name = node.arguments[0];
                        return fixer.replaceText(name, name.raw.replace(moduleName, correctModuleName));
                    }
                    else {
                        const name = node.source;
                        return fixer.replaceText(name, name.raw.replace(moduleName, correctModuleName));
                    }
                },
                messageId: 'noDomImportFramework',
                node,
            });
        }
        return {
            'Program:exit'() {
                let importName;
                const allImportNodes = helpers.getAllTestingLibraryImportNodes();
                allImportNodes.forEach((importNode) => {
                    importName = (0, node_utils_1.getImportModuleName)(importNode);
                    const domModuleName = DOM_TESTING_LIBRARY_MODULES.find((module) => module === importName);
                    if (!domModuleName) {
                        return;
                    }
                    report(importNode, domModuleName);
                });
            },
        };
>>>>>>> features/task-display-and-function
    },
});

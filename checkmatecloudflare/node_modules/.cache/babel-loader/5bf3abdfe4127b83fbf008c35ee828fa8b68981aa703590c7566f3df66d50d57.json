{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\super\\\\checkmate\\\\checkmatecloudflare\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Header from \"./components/Header\";\nimport TaskList from \"./components/TaskList\";\nimport Analytics from \"./components/Analytics\";\nimport Sidebar from \"./components/Sidebar\";\nimport { toggleTaskCompletion, setTaskPriority } from \"./utils\";\nimport \"./styles/App.css\";\nimport \"./styles/TaskItem.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [tasks, setTasks] = useState([{\n    id: 1,\n    title: \"Welcome to CheckMate! ðŸŽ‰ Start by completing this task to begin your productivity journey.\",\n    completed: false,\n    priority: \"medium\",\n    dueDate: \"\"\n  }\n  // Other tasks...\n  ]);\n  const [theme, setTheme] = useState(\"light\");\n  const toggleDarkMode = () => {\n    setTheme(prevTheme => prevTheme === \"light\" ? \"dark\" : \"light\");\n  };\n  const handleToggleTask = task => {\n    setTasks(tasks.map(t => t.id === task.id ? {\n      ...t,\n      completed: !t.completed\n    } : t));\n  };\n  const handleSetPriority = (task, priority) => {\n    setTasks(tasks.map(t => t.id === task.id ? {\n      ...t,\n      priority\n    } : t));\n  };\n  const getTabFilteredTasks = () => {\n    return tasks; // Apply filtering based on your conditions\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app-container ${theme === \"dark\" ? \"dark-mode\" : \"\"}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: /*#__PURE__*/_jsxDEV(Sidebar, {\n        theme: theme\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleDarkMode,\n      children: \"Toggle Dark Mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        theme: theme\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n        tasks: getTabFilteredTasks(),\n        onToggleTask: handleToggleTask,\n        onSetPriority: handleSetPriority,\n        theme: theme\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Analytics, {\n        tasks: tasks,\n        theme: theme\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"FHSG08stJyzHVondfnvSoU6Xf7I=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Header","TaskList","Analytics","Sidebar","toggleTaskCompletion","setTaskPriority","jsxDEV","_jsxDEV","App","_s","tasks","setTasks","id","title","completed","priority","dueDate","theme","setTheme","toggleDarkMode","prevTheme","handleToggleTask","task","map","t","handleSetPriority","getTabFilteredTasks","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onToggleTask","onSetPriority","_c","$RefreshReg$"],"sources":["C:/Users/super/checkmate/checkmatecloudflare/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Header from \"./components/Header\";\r\nimport TaskList from \"./components/TaskList\";\r\nimport Analytics from \"./components/Analytics\";\r\nimport Sidebar from \"./components/Sidebar\";\r\nimport { toggleTaskCompletion, setTaskPriority } from \"./utils\";\r\nimport \"./styles/App.css\";\r\nimport \"./styles/TaskItem.css\";\r\n\r\nconst App = () => {\r\n  const [tasks, setTasks] = useState([\r\n    {\r\n      id: 1,\r\n      title: \"Welcome to CheckMate! ðŸŽ‰ Start by completing this task to begin your productivity journey.\",\r\n      completed: false,\r\n      priority: \"medium\",\r\n      dueDate: \"\",\r\n    },\r\n    // Other tasks...\r\n  ]);\r\n\r\n  const [theme, setTheme] = useState(\"light\");\r\n\r\n  const toggleDarkMode = () => {\r\n    setTheme((prevTheme) => (prevTheme === \"light\" ? \"dark\" : \"light\"));\r\n  };\r\n\r\n  const handleToggleTask = (task) => {\r\n    setTasks(tasks.map((t) => (t.id === task.id ? { ...t, completed: !t.completed } : t)));\r\n  };\r\n\r\n  const handleSetPriority = (task, priority) => {\r\n    setTasks(tasks.map((t) => (t.id === task.id ? { ...t, priority } : t)));\r\n  };\r\n\r\n  const getTabFilteredTasks = () => {\r\n    return tasks; // Apply filtering based on your conditions\r\n  };\r\n\r\n  return (\r\n    <div className={`app-container ${theme === \"dark\" ? \"dark-mode\" : \"\"}`}>\r\n      <div className=\"sidebar\">\r\n        <Sidebar theme={theme} />\r\n      </div>\r\n      <button onClick={toggleDarkMode}>Toggle Dark Mode</button>\r\n      <div className=\"main-content\">\r\n        <Header theme={theme} />\r\n        <TaskList\r\n          tasks={getTabFilteredTasks()}\r\n          onToggleTask={handleToggleTask}\r\n          onSetPriority={handleSetPriority}\r\n          theme={theme}\r\n        />\r\n        <Analytics tasks={tasks} theme={theme} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}